URL SHORTNER WEB APP



 Project Overview

The project is a URL Shortener web application built with:

Frontend: React (served via CDN) + Bootstrap for styling.

Backend: Express.js (Node.js).

Storage: JSON file (db.json) to persist users and links.

The app allows users to:

Register/Login securely.

Generate short links (default or custom codes).

Redirect short links to original URLs.

Track clicks on each link.

Manage their own short links through a simple dashboard.

 Goals 
Simple, self-contained single-file Node.js app.

Minimal React frontend embedded in backend.

Secure authentication & authorization with JWT.

Persistent storage using JSON file.

Clean and responsive UI with Bootstrap.


 System Architecture
+------------------+          +----------------------+
|   Browser (UI)   | <------> |   React Frontend     |
| (React + Bootstrap)          | (served by Express) |
+------------------+          +----------------------+
                                      |
                                      v
                           +-----------------------+
                           | Express.js Backend    |
                           |  - Auth (JWT)        |
                           |  - Shorten URLs      |
                           |  - Redirect links    |
                           |  - Logging middleware|
                           +-----------------------+
                                      |
                                      v
                           +-----------------------+
                           |   db.json Storage     |
                           |  - Users              |
                           |  - Short links        |
                           +-----------------------+

4. Features
üîë Authentication

Signup/Login with username & password.

Passwords stored securely using bcrypt hash.

JWT tokens used for session authentication.

Expiration: 7 days.

Middleware validates tokens for protected routes.

‚úÇÔ∏è URL Shortening

Generate unique codes using nanoid.

Option for custom short codes.

Default expiry: 7 days (configurable).

Metadata stored: owner, original URL, clicks, timestamps.

üîó Redirection

/:code ‚Üí Redirects to original URL.

Expired links ‚Üí 410 Gone.

Invalid links ‚Üí 404 Not Found.

üìã User Dashboard

List of user‚Äôs links.

Shows: short link, original URL, click count.

Logout option.

üñ•Ô∏è Frontend (React)

Login/Signup card.

Shortener form (input + button).

List of user‚Äôs links.

Bootstrap styling.


 Security Considerations

Passwords hashed with bcrypt.

JWT tokens with expiry.

Input validation for URLs and usernames.

Protected routes enforced by middleware.

Logging middleware records requests.

. Running Environment

Node.js app runs on http://localhost:3000
.

index.js contains both backend & frontend.

db.json stores persistent data.

node_modules auto-generated by npm install.

 Future Enhancements

Move persistence to SQLite/Postgres/MongoDB.

Add refresh tokens for longer sessions.

Allow users to delete/edit their links.

Add analytics dashboard (unique visitors, geolocation).

Richer frontend with React Router & components.

Containerization with Docker
